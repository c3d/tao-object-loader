// *****************************************************************************
// object_loader.tbl                                               Tao3D project
// *****************************************************************************
//
// File description:
//
//     Definition of the interface between XLR and native code
//     for the "object loader" module.
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3
// (C) 2011,2013, Baptiste Soulisse <baptiste.soulisse@taodyne.com>
// (C) 2011, Catherine Burvelle <catherine@taodyne.com>
// (C) 2011-2014,2019, Christophe de Dinechin <christophe@dinechin.org>
// (C) 2010-2011,2013, Jérôme Forissier <jerome@taodyne.com>
// (C) 2011,2013, Baptiste Soulisse <baptiste.soulisse@taodyne.com>
// *****************************************************************************
// This file is part of Tao3D
//
// Tao3D is free software: you can r redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tao3D is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tao3D, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

#include "object_loader.h"

PREFIX(ObjectLoader_object_centered,  tree,  "object",
       PARM(x, real, )
       PARM(y, real, )
       PARM(z, real, )
       PARM(width, real, )
       PARM(height, real, )
       PARM(depth, real, )
       PARM(file, text, ),
       return object(self, x, y, z, width, height, depth, file, false),
       GROUP(module.ObjectLoader)
       SYNOPSIS("Loads, scales and translates a 3D object")
       DESCRIPTION("Loads, scales and translates a 3D object. "
                   "@a file is a relative or absolute path to the model file. "
                   "The object is shown centered at (@a x, @a y, @a z). "
                   "The size of the object is specified by "
                   "@a width, @a height and @a depth: the model is scaled "
                   "proportionally so that it fits in a box of the specified "
                   "size."))

PREFIX(ObjectLoader_colored_object,  tree,  "colored_object",
       PARM(x, real, )
       PARM(y, real, )
       PARM(z, real, )
       PARM(width, real, )
       PARM(height, real, )
       PARM(depth, real, )
       PARM(file, text, ),
       return object(self, x, y, z, width, height, depth, file, true), /* */)

PREFIX(ObjectLoader_colored_object_centered,  tree,  "colored_object",
       PARM(file, text, ),
       return object(self, file, true), /* */)

PREFIX(ObjectLoader_object,  tree,  "object",
       PARM(file, text, ),
       return object(self, file, false),
       GROUP(module.ObjectLoader)
       SYNOPSIS("Loads a 3D object from @a file")
       DESCRIPTION("Loads a 3D object from @a file. No scaling or translation "
                   "occurs. The model is drawn as defined in the file."))
